COMPONENTS
----------

The test system is composed of four parts as follow:

- Test Cases
  * Components:
    + Enumerator
    + Trigger
    + Result collection (part, case specific)
    + Result Verify
    + Data

- Test drivers:
  * Components:
    + Testing loops automation
    + Result collection (part, driver specific)
    + Result report (common)
    + Test log (driver specific)
  * Types:
    + Simple
    + Cross (host + target) (serial + network)
    + Kdump based

- Configurations:
  * Components:
    + Cases
    + Driver specific configuration
    + Cases specific configuration

- Tools
  * Components:
    + Software inject
    + Hardware inject
    + TTY logger
    + mce parser (mcelog)

The main intention behind the design is to re-use test cases amongst
various test method (represented by test drivers), such as kdump
based, cross test with a host machine and a target machine linked via
serial port and network, etc.


DIRECTORY HIERARCHY
-------------------

bin/			tools install dir
cases/ 			cases files, may be organized in sub-dirs, the
			interface of a class of test cases is a shell
			script under cases/, such as:
			    cases/soft-inj/reboot/cases.sh
			is for test cases triggered by soft-inject and may
			reboot system.
config/			configuration files
doc/			document files
drivers/		test drivers, there is one directory for each test
			driver, the interface of a driver is the driver.sh
			in corresponding dir, such as:
			    drivers/kdump/driver.sh
			is for kdump based test driver
lib/			libraries
results/		test results, general test result (pass, fail) is in
			results/result; additional result of various cases
			may be in corresponding directory under results, such
			as:
			    results/soft-inj/reboot/fatal/
			for additional result for test case
			soft-inj/reboot/fatal.
tools/			tools
work/			temporary files during test, test log is in work/log


TEST CASES
----------

Test cases are grouped into test case classes. The test cases in one
class share the same triggering, result collecting and result
verifying methods, and can be used in same set of test drivers. There
is one shell script for one test case class, the following command
line option should be supported by the shell script:

cases.sh enumerate		enumerate test cases in class, test cases
				are outputed to stdout
cases.sh trigger		trigger the test case
cases.sh get_result		get the result of test case
cases.sh verify			verify the result of test case, verifying
				result is outputed to stdout

When execute cases.sh [trigger|get_result|verify], the test case is
specified via environment variable this_case, which must be one of the
test cases returned by cases.sh enumerate.

Other environment variables may be defined to pass some information
from driver to test cases, such as:

vmcore (kdump only)		vmcore file name
klog				kernel log during test
reboot (kdump/cross only)	indicate there is a reboot between test
				case trigger and test case verify, some
				context has been gone.
